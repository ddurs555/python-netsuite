"""
Product search
"""
from netsuite.service import (
    ItemSearchBasic,
    SearchMultiSelectField,
    RecordRef,
)
from netsuite.utils import (
    get,
    search_records_using
)

"""
ns17:InventoryItem(nullFieldList: ns0:NullField, 
createdDate: xsd:dateTime, 
lastModifiedDate: xsd:dateTime, 
purchaseDescription: xsd:string, 
copyDescription: xsd:boolean, 
expenseAccount: ns0:RecordRef, 
dateConvertedToInv: xsd:dateTime, 
originalItemType: ns18:ItemType, 
originalItemSubtype: ns18:ItemSubType, 
cogsAccount: ns0:RecordRef, 
intercoCogsAccount: ns0:RecordRef, 
salesDescription: xsd:string, 
fraudRisk: ns18:InventoryItemFraudRisk, 
includeChildren: xsd:boolean, 
incomeAccount: ns0:RecordRef, 
intercoIncomeAccount: ns0:RecordRef, 
taxSchedule: ns0:RecordRef, 
dropshipExpenseAccount: ns0:RecordRef, 
deferRevRec: xsd:boolean, 
revenueRecognitionRule: ns0:RecordRef, 
revRecForecastRule: ns0:RecordRef, 
revenueAllocationGroup: ns0:RecordRef, 
createRevenuePlansOn: ns0:RecordRef, 
directRevenuePosting: xsd:boolean, 
contingentRevenueHandling: xsd:boolean, 
revReclassFXAccount: ns0:RecordRef, 
isTaxable: xsd:boolean, 
matrixType: ns18:ItemMatrixType, 
assetAccount: ns0:RecordRef, 
matchBillToReceipt: xsd:boolean, 
billQtyVarianceAcct: ns0:RecordRef, 
billPriceVarianceAcct: ns0:RecordRef, 
billExchRateVarianceAcct: ns0:RecordRef, 
gainLossAccount: ns0:RecordRef, 
shippingCost: xsd:double, 
shippingCostUnits: xsd:string, 
handlingCost: xsd:double, 
handlingCostUnits: xsd:string, 
weight: xsd:double, 
weightUnit: ns18:ItemWeightUnit, 
weightUnits: xsd:string, 
costingMethodDisplay: xsd:string, 
unitsType: ns0:RecordRef, 
stockUnit: ns0:RecordRef, 
purchaseUnit: ns0:RecordRef,
saleUnit: ns0:RecordRef, 
issueProduct: ns0:RecordRef, 
billingSchedule: ns0:RecordRef, 
trackLandedCost: xsd:boolean, 
matrixItemNameTemplate: xsd:string, 
isDropShipItem: xsd:boolean, 
isSpecialOrderItem: xsd:boolean, 
stockDescription: xsd:string, 
deferredRevenueAccount: ns0:RecordRef, 
intercoDefRevAccount: ns0:RecordRef, 
producer: xsd:boolean, 
manufacturer: xsd:string, 
revRecSchedule: ns0:RecordRef, 
mpn: xsd:string, 
multManufactureAddr: xsd:boolean, 
manufacturerAddr1: xsd:string, 
manufacturerCity: xsd:string, 
manufacturerState: xsd:string, 
manufacturerZip: xsd:string, 
countryOfManufacture: ns6:Country, 
roundUpAsComponent: xsd:boolean, 
purchaseOrderQuantity: xsd:double, 
purchaseOrderAmount: xsd:double, 
purchaseOrderQuantityDiff: xsd:double, 
receiptQuantity: xsd:double, 
receiptAmount: xsd:double, 
receiptQuantityDiff: xsd:double, 
defaultItemShipMethod: ns0:RecordRef, 
itemCarrier: ns6:ShippingCarrier, 
itemShipMethodList: ns0:RecordRefList, 
manufacturerTaxId: xsd:string, 
scheduleBNumber: xsd:string, 
scheduleBQuantity: xsd:long, 
scheduleBCode: ns18:ScheduleBCode, 
manufacturerTariff: xsd:string, 
preferenceCriterion: ns18:ItemPreferenceCriterion, 
minimumQuantity: xsd:long, 
enforceMinQtyInternally: xsd:boolean, 
maximumQuantity: xsd:long, 
minimumQuantityUnits: xsd:string, 
softDescriptor: ns0:RecordRef, 
shipPackage: ns0:RecordRef, 
shipIndividually: xsd:boolean, 
costCategory: ns0:RecordRef, 
pricesIncludeTax: xsd:boolean, 
purchasePriceVarianceAcct: ns0:RecordRef, 
quantityPricingSchedule: ns0:RecordRef, 
reorderPointUnits: xsd:string, 
useMarginalRates: xsd:boolean, 
preferredStockLevelUnits: xsd:string, 
costEstimateType: ns6:ItemCostEstimateType, 
costEstimate: xsd:double, 
transferPrice: xsd:double, 
overallQuantityPricingType: ns18:ItemOverallQuantityPricingType, 
pricingGroup: ns0:RecordRef, 
vsoePrice: xsd:double, 
vsoeSopGroup: ns6:VsoeSopGroup, 
costEstimateUnits: xsd:string, 
vsoeDeferral: ns6:VsoeDeferral, 
vsoePermitDiscount: ns6:VsoePermitDiscount, 
vsoeDelivered: xsd:boolean, 
itemRevenueCategory: ns0:RecordRef, 
preferredLocation: ns0:RecordRef, 
isStorePickupAllowed: xsd:boolean, 
reorderMultiple: xsd:long, 
cost: xsd:double, 
lastInvtCountDate: xsd:dateTime, 
nextInvtCountDate: xsd:dateTime, 
invtCountInterval: xsd:long, 
invtClassification: ns18:ItemInvtClassification, 
costUnits: xsd:string, 
totalValue: xsd:double, 
averageCost: xsd:double, 
useBins: xsd:boolean, 
quantityReorderUnits: xsd:string, 
leadTime: xsd:long, 
autoLeadTime: xsd:boolean, 
lastPurchasePrice: xsd:double, 
autoPreferredStockLevel: xsd:boolean, 
preferredStockLevelDays: xsd:double, 
safetyStockLevel: xsd:double, 
safetyStockLevelDays: xsd:long, 
backwardConsumptionDays: xsd:long, 
seasonalDemand: xsd:boolean, 
safetyStockLevelUnits: xsd:string, 
demandModifier: xsd:double, 
distributionNetwork: ns0:RecordRef, 
distributionCategory: ns0:RecordRef, 
autoReorderPoint: xsd:boolean, 
storeDisplayName: xsd:string, 
storeDisplayThumbnail: ns0:RecordRef, 
storeDisplayImage: ns0:RecordRef, 
storeDescription: xsd:string, 
storeDetailedDescription: xsd:string, 
storeItemTemplate: ns0:RecordRef, 
pageTitle: xsd:string, 
metaTagHtml: xsd:string, 
excludeFromSitemap: xsd:boolean, 
sitemapPriority: ns6:SitemapPriority, 
searchKeywords: xsd:string, 
isDonationItem: xsd:boolean, 
showDefaultDonationAmount: xsd:boolean, 
maxDonationAmount: xsd:double, 
dontShowPrice: xsd:boolean, 
noPriceMessage: xsd:string, 
outOfStockMessage: xsd:string, 
onSpecial: xsd:boolean, outOfStockBehavior: 
ns18:ItemOutOfStockBehavior, 
relatedItemsDescription: xsd:string, 
specialsDescription: xsd:string, 
featuredDescription: xsd:string, 
shoppingDotComCategory: xsd:string, 
shopzillaCategoryId: xsd:long, 
nexTagCategory: xsd:string, 
urlComponent: xsd:string, 
customForm: ns0:RecordRef, 
itemId: xsd:string, 
upcCode: xsd:string, 
displayName: xsd:string, 
vendorName: xsd:string, 
parent: ns0:RecordRef, 
isOnline: xsd:boolean, 
isHazmatItem: xsd:boolean, 
hazmatId: xsd:string, 
hazmatShippingName: xsd:string, 
hazmatHazardClass: xsd:string, 
hazmatPackingGroup: ns18:HazmatPackingGroup, 
hazmatItemUnits: xsd:string, 
hazmatItemUnitsQty: xsd:double, 
isGcoCompliant: xsd:boolean, 
offerSupport: xsd:boolean, 
isInactive: xsd:boolean, 
availableToPartners: xsd:boolean, 
department: ns0:RecordRef, 
class: ns0:RecordRef, 
location: ns0:RecordRef, 
costingMethod: ns18:ItemCostingMethod, 
currency: xsd:string, 
preferredStockLevel: xsd:double, 
pricingMatrix: ns17:PricingMatrix, 
hierarchyVersionsList: ns17:InventoryItemHierarchyVersionsList, 
accountingBookDetailList: ns17:ItemAccountingBookDetailList, 
purchaseTaxCode: ns0:RecordRef, 
defaultReturnCost: xsd:double, 
supplyReplenishmentMethod: ns0:RecordRef, 
alternateDemandSourceItem: ns0:RecordRef, 
fixedLotSize: xsd:double, 
periodicLotSizeType: ns18:PeriodicLotSizeType, 
supplyType: ns0:RecordRef, 
demandTimeFence: xsd:long, 
supplyTimeFence: xsd:long, 
rescheduleInDays: xsd:long, 
rescheduleOutDays: xsd:long, 
periodicLotSizeDays: xsd:long, 
supplyLotSizingMethod: ns0:RecordRef, 
forwardConsumptionDays: xsd:long, 
demandSource: ns0:RecordRef, 
quantityBackOrdered: xsd:double, 
quantityCommitted: xsd:double, 
quantityAvailable: xsd:double, 
quantityOnHand: xsd:double, 
onHandValueMli: xsd:double, 
quantityOnOrder: xsd:double, 
rate: xsd:double, 
reorderPoint: xsd:double, 
quantityCommittedUnits: xsd:string, 
salesTaxCode: ns0:RecordRef, 
quantityAvailableUnits: xsd:string, 
quantityOnHandUnits: xsd:string, 
vendor: ns0:RecordRef, 
quantityOnOrderUnits: xsd:string, 
productFeedList: ns17:ProductFeedList, 
subsidiaryList: ns0:RecordRefList, 
itemOptionsList: ns17:ItemOptionsList, 
itemVendorList: ns17:ItemVendorList, 
siteCategoryList: ns17:SiteCategoryList, 
translationsList: ns17:TranslationList, 
binNumberList: ns17:InventoryItemBinNumberList, 
locationsList: ns17:InventoryItemLocationsList, 
matrixOptionList: ns17:MatrixOptionList, 
presentationItemList: ns17:PresentationItemList, 
customFieldList: ns0:CustomFieldList, 
internalId: xsd:string, 
externalId: xsd:string)

"""

MODULE_TYPE = 'inventoryItem'
def get_item(internal_id):
    return get(RecordRef(internalId=internal_id, type=MODULE_TYPE))


def list_products(internal_ids):
    id_references = [RecordRef(internalId=id) for id in internal_ids]
    item_search = ItemSearchBasic(
        internalId=SearchMultiSelectField(
            searchValue=id_references,
            operator='anyOf'
        ))
    result = search_records_using(item_search)
    r = result.body.searchResult
    if r.status.isSuccess:
        return r.recordList.record
